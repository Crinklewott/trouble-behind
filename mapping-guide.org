#+TITLE:Trouble Behind mapping guide
#+AUTHOR:thingywhat

Trouble Behind has a pretty extensive map system composed entirely of
[[http://en.wikipedia.org/wiki/S-expression][S-Expressions]] (Just a bunch of nested lists).

Each section of the map has a particular meaning and will be
automagically used in the game.


* player-location
This is a dotted list to indicate where the player should start the
game...

The default is:
#+BEGIN_SRC lisp
  (player-location . your-bedroom)
#+END_SRC

This means that the player will start in the node marked as
"=your-bedroom=".

* nodes
This alist contains descriptions for the locations in the map...

For example:
#+BEGIN_SRC lisp
  (your-bedroom (you are in your bedroom. a clock ticks on the wall.))
#+END_SRC

This means that =your-bedroom= will be described as mentioned in the
list when you enter the room or =look= around.

* edges
=edges= contains an alist of lists that tells what each room is
connected to, how it is connected, and what direction is it...

For example:
#+BEGIN_SRC lisp
  (hallway (east your-bedroom door)
           (south living-room exit))
#+END_SRC
This means that the =hallway= is connected to =your-bedroom= by a
=door= to the =east=, and to the =living-room= to the =south= by an
=exit=.

So, from the hallway, the player can "=walk south=" to get to the
=living-room= node, or "=walk east=" to go you =your-bedroom=.

* items
The =items= alist contains a list of items you can grab in the game
along with their descriptions.

For example:
#+BEGIN_SRC lisp
  (baseball (you are not really that good at throwing... but this still
                 looks like it can do some damage.)
#+END_SRC

This defines a =baseball= with the description in brackets.

This description will be shown when the player uses =look= on it when
the item is either in their inventory or is in the same room as them.

* item-location-detauls
This alist contains the default locations you'll find items you can
take, along what they look like when undisturbed by the player.

For example:
#+BEGIN_SRC lisp
  (blanket (your-bedroom (there is a cozy blanket on your bed.)))
#+END_SRC

This shows that the =blanket= is in =your-bedroom= and is described by
the last set of parenthesis.

So, if you walk into the =your-bedroom= node and have never grabbed the
=blanket=, you will see the description of the node as described in the
=node= section, and then the description of the =blanket= as shown here
followed by any other items in the room currently...

As soon as the item is picked up, you will never see this description
again, even if you drop the item in the same room it started in.
Rather, the generic "There is a blanket on the floor here." will be shown.

* events
This is the place you can define the actions a player can take and
when they can take them...

This is another alist, but this one contains more alists.

Each list in this list is known as a "form", allow me to describe each:

** First form
The first form is the name of the command the player would use in the
game.

For example:
#+BEGIN_SRC lisp
  (throw
      ((baseball clock)
       (when-player can see baseball and is in your-bedroom)
       (uh-oh! the clock shatters! you retreive the baseball.)
       (you are in your bedroom. a broken clock sits sadly on the wall.))
    ((baseball window)
     (when-player can see baseball and is in the hallway)
     (the window shatters into a waterfall of shards! oh
          jeez... you are going to be in trouble for this one
          for sure!  the ball lands in the tall grass of the
          yard outside.)
     (you are in a long hallway. a brisk wind gusts in from
          the shattered window.)
     (item-is-now-at 'baseball 'yard)))

#+END_SRC
This is all of the events in which a player can =throw= something...

For each event, there is a list of situations they can use it... These
situations are a list of two items that shows the item and the thing the
player tries to perform the action on... This does not need to be an item
declared anywhere, so:
#+BEGIN_SRC lisp
  ((baseball clock)
   (when-player can see baseball and is in your-bedroom)
   (uh-oh! the clock shatters! you retreive the baseball.)
   (you are in your bedroom. a broken clock sits sadly on the wall.))
#+END_SRC

This defines what happens when player throws the baseball at the
clock.

** Second form
The second form (=(when-player can see baseball and is in your-bedroom)=)
is the conditions under which this event will occur... This can be any
ol' Lisp expression, but if that isn't your thing, you can use the
magical =when-player= macro I have prepared to make this easy.

In this case, this will perform the action when the player can see the
=baseball= (So is either in the same room as it, or has it in their
inventory.) and is in the node named =your-bedroom=.

As you can see, the macro accepts almost-plain English to describe if a
player meets the requirements or not before performing an action.

The way it is documented in the source file is as follows:
#+BEGIN_EXAMPLE
  Checks if the player meets certain conditions in plain english. For example:
  (when-player has blanket)
  ...is valid, and will check if the player has a blanket in their
  inventory...

  You can chain together statements with \"and\" as well, so the
  following works too:
  (when-player has blanket and is in your-bedroom)

  Any words the macro doesn't understand are simply ignored.

  Valid words are:
  - in, at <place>
  - has, holds <item>
  - see, sees <thing>
  - already <special command>
#+END_EXAMPLE

On thing this documentation does not describe is that this macro
can also check if a player already ran another event in the past
with "=already="...

For example:
#+BEGIN_SRC lisp
  (when-player has the baseball and is in the hallway and already (throw baseball clock))
#+END_SRC

This checks if the player currently has the baseball, is in the
hallway, and has already done the event where they threw the
baseball at the clock. (This event doesn't need to be for the
current location.)

Like the =when-player= macro, the list at the end ignores some
useless words that don't really mean anything in context, so
you can make this reasonably plain english in a way... For example:
#+BEGIN_SRC lisp
  (when-player has the baseball and is in the hallway and already (throw baseball at the clock))
#+END_SRC

...would mean the exact same thing as above, if that is easier
for you to understand.

** Third form
The third form shows the message that the player will see when they
sucessfully perform this action (Meaning the conditions in the second
pass), so:
#+BEGIN_SRC lisp
  (uh-oh! the clock shatters! you retreive the baseball.)
#+END_SRC

This is displayed when the player throws the baseball at the clock
when the above conditions are met...

** Fourth form
The fourth form shows what the room the player is currently standing
in will look like after performing the action, so, when the player
throws the baseball at the clock, this is the fourth form for that:
#+BEGIN_SRC lisp
  (you are in your bedroom. a broken clock sits sadly on the wall.))
#+END_SRC

From that point on, whenever you enter this room or =look= while
inside, this is the message you will see after performing the action.
(It overrides the node description.)

** Fifth form
The fifth and final form is optional... But if you specify it, it is
any code you wish to execute after the event has been triggered
successfully.

There is currently only one convenience function for this, so you
would need to know Lisp to do anything beyond this but:
#+BEGIN_SRC lisp
  (item-is-now-at 'baseball 'yard)
#+END_SRC

If this is the last form, it will move the baseball from wherever it
is and put it in the =yard= node. (Note the single quotes before the
symbols.)

You can see this is the last form for the second =throw baseball=
action in the example way above, lemme drag it down here:

#+BEGIN_SRC lisp
  (throw
    ((baseball window)
     (when-player can see baseball and is in the hallway)
     (the window shatters into a waterfall of shards! oh
          jeez... you are going to be in trouble for this one
          for sure!  the ball lands in the tall grass of the
          yard outside.)
     (you are in a long hallway. a brisk wind gusts in from
          the shattered window.)
     (item-is-now-at 'baseball 'yard)))
#+END_SRC

This entire action means:
- When the player attempts to =throw= a =baseball= at a =window=
- If the player is in the same room as the =baseball=, or is
  holding it, and is in the hallway...
- The Message "The window shatters into a waterfall of shards! Oh
  jeez... You are going to be in trouble for this one for sure!
  The ball lands in the tall grass of the yard outside." displays
- Whenever walking in the hallway after this, or using =look=,
  the player will see the message "You are in a long hallway. A
  brisk wind gusts in from the shattered window."
- The =baseball= is moved from wherever it started and is now in
  the =yard= node.
