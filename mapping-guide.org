#+TITLE:Trouble Behind mapping guide
#+AUTHOR:thingywhat

Trouble Behind has a pretty extensive map system composed entirely of
[[http://en.wikipedia.org/wiki/S-expression][S-Expressions]] (Just a bunch of nested lists).

* S-Expressions
An S-Expression in this case is a set of parenthesis with a number of
symbols (words) inside them...

For example:
#+BEGIN_SRC lisp
  (heyas there! how ya doing?)
#+END_SRC

In Trouble Behind, anything inside of these "forms" will be
automatically capitalized, and can be any alphanumeric character.

So, the above S-Expressions would be output like:
#+BEGIN_EXAMPLE
  Heyas there! How ya doing?
#+END_EXAMPLE

S-Expressions allow for punctuation such as "!", ".", and "?", but
quotes, apostrophes and commas have a special meaning in these lists.

So, to display a string verbatim, you can surround it in quotes:
#+BEGIN_SRC lisp
  (this is what I "mean," right here...)
#+END_SRC

Which would output as:
#+BEGIN_EXAMPLE
  This is what I mean, right here...
#+END_EXAMPLE

The [[./map.lmap][entire map]] is composed of these expressions, and each section of
the map has a particular meaning to the game engine. So, any changes
you make to the map will be automagically used in the game.

Below is a description of each part of the map:
* player-location
This is a two-item list to indicate where the player should start the
game...

The default is:
#+BEGIN_SRC lisp
  (player-location  your-bedroom)
#+END_SRC

This means that the player will start in the node marked as
"=your-bedroom=".

* nodes
This alist contains descriptions for the locations in the map...

For example:
#+BEGIN_SRC lisp
  (your-bedroom (you are in your bedroom. a clock ticks on the wall.))
#+END_SRC

This means that =your-bedroom= will be described as mentioned in the
list when you enter the room or =look= around.

* edges
=edges= contains an alist of lists that tells what each room is
connected to, how it is connected, and what direction is it...

For example:
#+BEGIN_SRC lisp
  (hallway (east your-bedroom door)
           (south living-room exit))
#+END_SRC
This means that the =hallway= is connected to =your-bedroom= by a
=door= to the =east=, and to the =living-room= to the =south= by an
=exit=.

So, from the hallway, the player can "=walk south=" to get to the
=living-room= node, or "=walk east=" to go to =your-bedroom=.

* items
The =items= alist contains a list of items you can see in the game
along with their descriptions.

For example:
#+BEGIN_SRC lisp
  (baseball (you are not really that good at throwing... but this still
                 looks like it can do some damage.)
#+END_SRC

This defines a =baseball= with the description in brackets.

This description will be shown when the player uses =look= on it when
the item is either in their inventory or is in the same room as them.

If there is a second list in the definition of an item, you will not
be able to pick up the item, but rather an excuse will be given.

For example:
#+BEGIN_SRC lisp
  (vase (a priceless "Ming" vase sits tucked away on a ridiculously
           large shelf out of reach. very bad things would happen if
           this broke.)
        (it is too high for you to reach.))
#+END_SRC

This would define a vase item that, when you try to obtain it, would
tell you that it is too high for you to reach.

* item-details
This alist contains the default locations you'll find items you can
take, along what they look like when undisturbed by the player.

For example:
#+BEGIN_SRC lisp
  (blanket (your-bedroom (there is a cozy blanket on your bed.)))
#+END_SRC

This shows that the =blanket= is in =your-bedroom= and is described by
the last set of parenthesis.

So, if you walk into the =your-bedroom= node and have never grabbed the
=blanket=, you will see the description of the node as described in the
=node= section, and then the description of the =blanket= as shown here
followed by any other items in the room currently...

As soon as the item is picked up, you will never see this description
again, even if you drop the item in the same room it started in.
Rather, the generic "There is a blanket on the floor here." will be shown.

* events
This is the place you can define the actions a player can take and
when they can take them...

This is another alist, but this one contains more alists.

Each list in this list is known as a "form", allow me to describe each:

** First form
The first form is the name of the command the player would use in the
game.

For example:
#+BEGIN_SRC lisp
  (throw
    ((baseball clock) 10
     (when-player can see baseball and is in your-bedroom)
     (uh-oh! the clock shatters!)
     ((new-location-description
       (you are in your bedroom. a broken clock sits sadly on the wall.))
      (item-is-now-at 'baseball 'your-bedroom)))
    
    ((baseball window) 50
     (when-player can see baseball and is in the hallway)
     (the window shatters into a waterfall of shards! oh man... you
          are going to be in trouble for this one for sure! the ball
          descends into the tall grass of the yard below.)
     ((new-location-description
       (you are in a long hallway. a brisk wind gusts in from the
            shattered window.))
      (item-is-now-at 'baseball 'yard)))
    
    ((baseball vase) 150
     (when-player can see baseball and can see vase)
     (the vase shatters! that vase was priceless. there is no way you
          are getting away with that one! one of the larger shards
          falls to the floor.)
     ((item-is-now-at 'vase 'ether)
      (item-is-now-at 'shard *player-location*)
      (item-is-now-at 'baseball *player-location*))))
#+END_SRC
This giant form probably looks really intimidating... But it really
isn't when you break it down.

This is a declaration for three separate times a player can throw
something...

The top bit (The =(throw=) is the name of the command.

And then the remaining forms are alist entries for all of the
situations where this would be applicable.

There are three in the above example, which are =(baseball clock)=,
=(baseball window)=, and =(baseball vase)=...

These correlate with when the player tries to type the following
three things:
#+BEGIN_EXAMPLE
  throw the baseball at the clock
  throw baseball out window
  throw baseball vase
#+END_EXAMPLE

The values that follow after those forms are the description of what
happens when that action occurs, the following describes what each
form does:

** Second form
The second form is a number, this number refers to how much trouble
you would get in if you were caught doing this... It *also*
coincidentally, is the score you get for doing this action.

#+BEGIN_SRC lisp
  100
#+END_SRC

** Third form
The third form... Eg:
#+BEGIN_SRC lisp
  (when-player can see baseball and is in your-bedroom)
#+END_SRC
...are the conditions under which this event will occur... This can be
any ol' Lisp expression, but if that isn't your thing, you can use the
magical =when-player= macro I have prepared to make this easy.

In this case, this will perform the action when the player can see the
=baseball= (So is either in the same room as it, or has it in their
inventory.) and is in the node named =your-bedroom=.

As you can see, the macro accepts almost-plain English to describe if a
player meets the requirements or not before performing an action.

The way it is documented in the source file is as follows:
#+BEGIN_EXAMPLE
  Checks if the player meets certain conditions in plain english. For example:
  (when-player has blanket)
  ...is valid, and will check if the player has a blanket in their
  inventory...

  You can chain together statements with \"and\" as well, so the
  following works too:
  (when-player has blanket and is in your-bedroom)

  Any words the macro doesn't understand are simply ignored.

  Valid words are:
  - in, at <place>
  - has, holds <item>
  - see, sees <thing>
  - already <special command>
#+END_EXAMPLE

On thing this documentation does not describe is that this macro
can also check if a player already ran another event in the past
with "=already="...

For example:
#+BEGIN_SRC lisp
  (when-player has the baseball and is in the hallway and already (throw baseball clock))
#+END_SRC

This checks if the player currently has the baseball, is in the
hallway, and has already done the event where they threw the
baseball at the clock. (This event doesn't need to be for the
current location.)

Like the =when-player= macro, the list at the end ignores some
useless words that don't really mean anything in context, so
you can make this reasonably plain english in a way... For example:
#+BEGIN_SRC lisp
  (when-player has the baseball and is in the hallway and already (throw baseball at the clock))
#+END_SRC

...would mean the exact same thing as above, if that is easier
for you to understand.

** Fourth form
The fourth form shows the message that the player will see when they
sucessfully perform this action (Meaning the conditions in the second
pass), so:
#+BEGIN_SRC lisp
  (uh-oh! the clock shatters! you retreive the baseball.)
#+END_SRC

This is displayed when the player throws the baseball at the clock
when the above conditions are met...

** Fifth form
The fifth and final form is optional... But if you specify it, it is
any code inside of a list you wish to execute after the event has been
triggered successfully.

There is are a few convenience functions for this, but you would need
to know Lisp to do anything beyond that...

The convenience functions are:
*** item-is-now-at
This function takes two quoted arguments, and puts an item that
matches the first to the node that matches the second.
#+BEGIN_SRC lisp
  (item-is-now-at 'baseball 'yard)
#+END_SRC

If no node exists with the name given, it just hides the item. For
example, in the map, I sometimes move items to the =ether= to pretend
as if they have been destroyed.

Eg:
#+BEGIN_SRC lisp
  (item-is-now-at 'vase 'ether)
#+END_SRC
This would make the =vase= disappear from the map.

I also define items in the =ether= in the map itself so I can "poof"
them into existence on certain events, like:
#+BEGIN_SRC lisp
  (item-is-now-at 'shard *player-location*)
#+END_SRC

This would make the =shard= item appear in the same room as the player
when the event is triggered.

*** new-location-description
This assigns a location a new description... For example:
#+BEGIN_SRC lisp
  (new-location-description
   '(you are in a long hallway. a brisk wind gusts in from the
     shattered window.))
#+END_SRC

This would set the description for the room the player is currently in
to the description in the list.

This can also be used to change the description of places outside of
the player's location with an optional second argument... So if the
player triggered an event in a node called =your-room= and we had this
in the fifth form:
#+BEGIN_SRC lisp
  (new-location-description
   '(you are in a long hallway. a brisk wind gusts in from the
     shattered window.)
   'hallway)
#+END_SRC

...this would update the hallway node with that description, and not
the =your-room= node.

*** connect-places
You can use this function to connect two places on the map, for
example:
#+BEGIN_SRC lisp
  (connect-places 'hallway 'west 'yard 'east 'blanket)
#+END_SRC
This would connect the =hallway= node on the =west= side to the =yard=
node on the =east= side with a =blanket=.

You can use this to form paths that never used to exist between
certain nodes.

*** Special forms
There are two special forms you can use in your commands:

**** =*player-location*=
Putting =*player-location*= on its own will substitute itself for the
current location the player is standing. Generally, you would use this
if you want to do something at the current location of the player.

For example:
#+BEGIN_SRC lisp
  (item-is-now-at 'shard *player-location*)
#+END_SRC

This puts the =shard= item in the same node that the player is
standing in.

**** =inventory=
This quoted symbol is the place that the player stores things when
they are holing onto them... For example:
#+BEGIN_SRC lisp
  (item-is-now-at 'shard 'inventory)
#+END_SRC

This would move the =shard= item from wherever it started into the
player's inventory.

** Putting it all together
With all of the above, consider the following form:

#+BEGIN_SRC lisp
  (throw
    ((baseball vase) 150
     (when-player can see baseball and can see vase)
     (the vase shatters! that vase was priceless. there is no way you
          are getting away with that one! one of the larger shards falls
          to the floor.)
     ((item-is-now-at 'vase 'ether)
      (item-is-now-at 'shard *player-location*)
      (item-is-now-at 'baseball *player-location*))))
#+END_SRC

This entire action means:
- When the player attempts to =throw= a =baseball= at a =vase=
- If the player is holding onto the =baseball=, or can see it in the
  same room as them, and they are in the same room as the =vase=...
- The Message "The vase shatters! That vase was priceless. There is no
  way you are getting away with that one! One of the larger shards
  falls to the floor." gets displayed.
- 150 trouble points will be awarded/afflicted upon the player.
- The =vase= item stops existing.
- The =shard= item exists in the room the player is standing in.
- The =baseball= is put onto the floor of the room the player is
  standing in. (It is natural for a baseball to stop being in the
  player inventory after they throw it.)

* npcs
NPCs are just an alist with two items:
The first is the name of the npc, and the second is their starting
location.

They are just dumb and move around randomly right now, but more is
soon to come.
